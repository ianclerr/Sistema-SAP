"""
SCRIPT DE GENERACI√ìN Y ENV√çO DE REPORTES DE VENTAS DESDE POSTGRESQL

Este script automatiza:
1. Extracci√≥n de datos de ventas desde PostgreSQL
2. Generaci√≥n de reporte en Excel con formato profesional
3. Env√≠o por email con m√©tricas resumidas y archivo adjunto
4. Manejo de errores y reintentos autom√°ticos

Configuraci√≥n requerida:
- Credenciales de DB en config/database.py
- Configuraci√≥n de email en config/email.py
"""
import pandas as pd
from sqlalchemy import create_engine, text
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import os
from datetime import datetime
from openpyxl import Workbook
import sys
from pathlib import Path
import time
import logging

# ==============================================
# CONFIGURACI√ìN INICIAL
# ==============================================

# Configuraci√≥n del sistema de logging (registro de eventos)
logging.basicConfig(
    level=logging.INFO,  # Nivel de detalle (INFO, WARNING, ERROR)
    format='%(asctime)s - %(levelname)s - %(message)s',  # Formato del mensaje
    handlers=[logging.StreamHandler()]  # Mostrar en consola
)

# A√±adir ruta del proyecto para importar configuraciones
sys.path.append(str(Path(__file__).parent.parent.parent))

# Importar configuraciones externas
from config.database import get_db_uri  # Credenciales de DB
from config.email import EMAIL_CONFIG  # Configuraci√≥n de email

# ==============================================
# FUNCIONES PRINCIPALES
# ==============================================

def conectar_postgres():
    """
    Establece conexi√≥n con la base de datos PostgreSQL
    
    Returns:
        engine: Objeto de conexi√≥n SQLAlchemy o None si falla
    """
    try:
        # Crear motor de conexi√≥n usando la URI de la DB
        engine = create_engine(get_db_uri())
        logging.info("‚úÖ Conexi√≥n exitosa a PostgreSQL")
        return engine
    except Exception as e:
        logging.error(f"‚ùå Error de conexi√≥n: {str(e)}")
        return None

def obtener_rango_fechas(engine):
    """
    Obtiene el rango de fechas disponible en la tabla de ventas
    
    Args:
        engine: Conexi√≥n activa a la base de datos
        
    Returns:
        tuple: (fecha_min, fecha_max) o None si hay error
    """
    try:
        with engine.connect() as conn:
            # Consulta SQL para obtener fechas m√≠nima y m√°xima
            result = conn.execute(text("SELECT MIN(fecha), MAX(fecha) FROM ventas"))
            return result.fetchone()
    except Exception as e:
        logging.error(f"‚ùå Error al obtener rango de fechas: {str(e)}")
        return None

def generar_reporte_excel(df, fecha_min, fecha_max):
    """
    Genera archivo Excel con formato profesional a partir de los datos
    
    Args:
        df: DataFrame con los datos de ventas
        fecha_min: Fecha inicial del per√≠odo
        fecha_max: Fecha final del per√≠odo
        
    Returns:
        str: Ruta del archivo generado o None si falla
    """
    try:
        # Crear directorio para reportes si no existe
        os.makedirs('reportes', exist_ok=True)
        
        # Nombre del archivo con rango de fechas
        nombre_reporte = f"reportes/reporte_ventas_{fecha_min.strftime('%Y%m%d')}_{fecha_max.strftime('%Y%m%d')}.xlsx"
        
        # Crear archivo Excel con pandas y openpyxl
        with pd.ExcelWriter(nombre_reporte, engine='openpyxl') as writer:
            # Exportar DataFrame a Excel
            df.to_excel(writer, index=False, sheet_name='Ventas')
            
            # Obtener objetos para formateo
            workbook = writer.book
            worksheet = writer.sheets['Ventas']
            
            # Formatear columna de fechas
            for cell in worksheet['B'][1:]:
                cell.number_format = 'DD/MM/YYYY'
            
            # Ajustar anchos de columnas
            column_widths = {'A': 10, 'B': 12, 'C': 25, 'D': 25, 'E': 10, 'F': 18}
            for col, width in column_widths.items():
                worksheet.column_dimensions[col].width = width
            
            # Formatear columna de montos (moneda)
            for cell in worksheet['F'][1:]:
                cell.number_format = '"Gs."#,##0'
        
        logging.info(f"üìä Reporte generado: {nombre_reporte}")
        return nombre_reporte
    except Exception as e:
        logging.error(f"‚ùå Error al generar Excel: {str(e)}")
        return None

def obtener_metricas_ventas(df):
    """
    Calcula m√©tricas clave a partir de los datos de ventas
    
    Args:
        df: DataFrame con los datos de ventas
        
    Returns:
        dict: Diccionario con las m√©tricas calculadas
    """
    return {
        'total': df['monto_total'].sum(),
        'producto_top': df.groupby('producto')['monto_total'].sum().idxmax(),
        'monto_producto': df.groupby('producto')['monto_total'].sum().max(),
        'cliente_top': df.groupby('cliente')['monto_total'].sum().idxmax(),
        'monto_cliente': df.groupby('cliente')['monto_total'].sum().max()
    }

def enviar_email_con_reintentos(reporte_path, metrics, fecha_min, fecha_max, total_registros, max_intentos=3):
    """
    Env√≠a email con reporte adjunto y sistema de reintentos
    
    Args:
        reporte_path: Ruta del archivo a adjuntar
        metrics: M√©tricas calculadas
        fecha_min: Fecha inicio del reporte
        fecha_max: Fecha fin del reporte
        total_registros: Total de ventas procesadas
        max_intentos: Intentos m√°ximos de env√≠o
        
    Returns:
        bool: True si tuvo √©xito, False si fall√≥
    """
    intento = 1
    while intento <= max_intentos:
        try:
            logging.info(f"‚úâÔ∏è Procesando env√≠o de email (Intento {intento}/{max_intentos})...")
            
            # 1. CONFIGURAR MENSAJE MIME
            msg = MIMEMultipart()
            msg['From'] = EMAIL_CONFIG['email_from']
            msg['To'] = EMAIL_CONFIG['email_to']
            msg['Subject'] = f"REPORTE VENTAS {fecha_min.strftime('%d-%m-%Y')} al {fecha_max.strftime('%d-%m-%Y')}"
            
            # 2. CREAR CUERPO DEL EMAIL
            cuerpo = f"""
REPORTE DE VENTAS - RESUMEN
==========================

FECHA GENERACI√ìN: {datetime.now().strftime('%d/%m/%Y %H:%M')}
PER√çODO ANALIZADO: {fecha_min.strftime('%d/%m/%Y')} al {fecha_max.strftime('%d/%m/%Y')}

M√âTRICAS PRINCIPALES
--------------------
* TOTAL FACTURADO: Gs. {metrics['total']:,.0f}
* PRODUCTO DESTACADO: {metrics['producto_top']} (Gs. {metrics['monto_producto']:,.0f})
* CLIENTE DESTACADO: {metrics['cliente_top']} (Gs. {metrics['monto_cliente']:,.0f})

TOTAL VENTAS ANALIZADAS: {total_registros}

Se adjunta el reporte detallado en formato Excel.
"""
            msg.attach(MIMEText(cuerpo, 'plain'))
            
            # 3. ADJUNTAR ARCHIVO EXCEL
            with open(reporte_path, "rb") as f:
                adjunto = MIMEApplication(f.read(), _subtype="xlsx")
                adjunto.add_header('Content-Disposition', 'attachment', 
                                filename=f"reporte_ventas_{fecha_min.strftime('%Y%m%d')}_{fecha_max.strftime('%Y%m%d')}.xlsx")
                msg.attach(adjunto)
            
            # 4. ENVIAR EMAIL POR SMTP
            with smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port']) as server:
                server.starttls()  # Seguridad TLS
                server.login(EMAIL_CONFIG['email_from'], EMAIL_CONFIG['email_password'])
                server.send_message(msg)
                logging.info("‚úÖ Email enviado exitosamente")
                return True
                
        except Exception as e:
            logging.error(f"‚ùå Error al enviar email (Intento {intento}): {str(e)}")
            if intento < max_intentos:
                logging.info(f"‚è≥ Reintentando en 5 segundos...")
                time.sleep(5)
            intento += 1
    
    logging.error(f"üö® No se pudo enviar el email despu√©s de {max_intentos} intentos")
    return False

# ==============================================
# FUNCI√ìN PRINCIPAL
# ==============================================

def main():
    """
    Funci√≥n principal que coordina todo el proceso:
    1. Conexi√≥n a DB
    2. Extracci√≥n de datos
    3. Generaci√≥n de reporte
    4. Env√≠o por email
    """
    logging.info("\n=== SISTEMA DE ENV√çO DE REPORTES ===")
    
    # 1. CONEXI√ìN A LA BASE DE DATOS
    engine = conectar_postgres()
    if not engine:
        return
    
    try:
        # 2. OBTENER RANGO DE FECHAS
        fechas = obtener_rango_fechas(engine)
        if not fechas:
            return
        fecha_min, fecha_max = fechas
        logging.info(f"üìÖ Rango de fechas disponible: {fecha_min} a {fecha_max}")
        
        # 3. CONSULTAR DATOS DE VENTAS
        query = text("""
        SELECT 
            v.venta_id,
            v.fecha,
            c.nombre AS cliente,
            p.nombre AS producto,
            v.cantidad,
            v.monto_total
        FROM ventas v
        JOIN clientes c ON v.cliente_id = c.cliente_id
        JOIN productos p ON v.producto_id = p.producto_id
        WHERE v.fecha BETWEEN :fecha_inicio AND :fecha_fin
        ORDER BY v.fecha DESC
        """)
        
        with engine.connect() as conn:
            df = pd.read_sql(
                query, 
                conn,
                params={"fecha_inicio": fecha_min, "fecha_fin": fecha_max}
            )
            
            if df.empty:
                logging.warning("‚ö†Ô∏è No hay ventas en el per√≠odo disponible")
                return
            
            # 4. CALCULAR M√âTRICAS
            metrics = obtener_metricas_ventas(df)
            
            # 5. GENERAR REPORTE EXCEL
            reporte_path = generar_reporte_excel(df, fecha_min, fecha_max)
            if not reporte_path:
                return
            
            # 6. ENVIAR EMAIL CON REPORTE
            enviar_email_con_reintentos(reporte_path, metrics, fecha_min, fecha_max, len(df))
            
    except Exception as e:
        logging.error(f"‚ùå Error inesperado: {str(e)}")
    finally:
        engine.dispose()
        logging.info("üîö Proceso completado")

# Punto de entrada del script
if __name__ == "__main__":
    main()